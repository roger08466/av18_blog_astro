---
import Layout from '../../layouts/Layout.astro';
import { videoApi } from '../../api/api.js';
import VideoCard from '../../components/VideoCard/index.jsx';
import VideoCardSkeleton from '../../components/SkeletonComponents/VideoCardSkeleton.jsx';

// 獲取動態路由參數
const { id } = Astro.params;

// 獲取數據
let video = null;
let videoError = null;
let videoLoading = true;

let relatedVideos = [];
let relatedVideosError = null;
let relatedVideosLoading = true;

try {
  // 獲取影片詳情
  video = await videoApi.getVideoDetail(id);
  videoLoading = false;
  
  // 獲取相關影片 (使用相同片商的影片)
  if (video && video.manufacturer) {
    try {
      const relatedData = await videoApi.getVideosByManufacturer(video.manufacturer, { limit: 6 });
      // 過濾掉當前影片
      relatedVideos = relatedData?.videos?.filter(v => v.hid !== id) || [];
      relatedVideosLoading = false;
    } catch (error) {
      console.error('Error fetching related videos:', error);
      relatedVideosError = error.message || 'Failed to fetch related videos';
      relatedVideosLoading = false;
    }
  } else {
    relatedVideosLoading = false;
  }
} catch (error) {
  console.error('Error fetching video details:', error);
  videoError = error.message || 'Failed to fetch video details';
  videoLoading = false;
  relatedVideosLoading = false;
}

// 當前語言 (在客戶端會被覆蓋)
const currentLanguage = 'tw';

// 翻譯函數 (在客戶端會被覆蓋)
const t = (key, fallback) => fallback;

// 格式化日期
const formatDate = (dateString) => {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString();
};

// 格式化標籤
const formatTags = (tagsString) => {
  if (!tagsString) return [];
  
  // 直接按逗號分割，並修剪每個標籤
  let tags = tagsString.split(',').map(tag => tag.trim()).filter(Boolean);
  
  return tags;
};

// 格式化演員
const formatActors = (actorsString) => {
  if (!actorsString) return [];
  
  // 如果已經是陣列，直接返回
  if (Array.isArray(actorsString)) {
    return actorsString;
  }
  
  // 檢查是否是 JSON 字符串格式（以 [ 開頭和 ] 結尾）
  if (typeof actorsString === 'string' && actorsString.trim().startsWith('[') && actorsString.trim().endsWith(']')) {
    try {
      const actors = JSON.parse(actorsString);
      return Array.isArray(actors) ? actors : [actorsString];
    } catch (e) {
      // JSON 解析失敗，視為普通字符串
      return [actorsString];
    }
  }
  
  // 如果是普通字符串，直接返回包含該字符串的陣列
  return [actorsString];
};

// 頁面標題
const pageTitle = video ? `${video.title} - AV18 Blog` : 'Video Detail - AV18 Blog';
---

<Layout title={pageTitle}>
  <div class="container py-6">
    {videoLoading ? (
      <div class="bg-white p-6 rounded-lg shadow-md animate-pulse">
        <div class="h-8 bg-gray-200 rounded w-3/4 mb-6"></div>
        <div class="aspect-video bg-gray-300 rounded mb-6"></div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="md:col-span-2">
            <div class="h-6 bg-gray-200 rounded w-1/2 mb-4"></div>
            <div class="h-4 bg-gray-200 rounded w-full mb-2"></div>
            <div class="h-4 bg-gray-200 rounded w-full mb-2"></div>
            <div class="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
            <div class="h-6 bg-gray-200 rounded w-1/3 mb-4"></div>
            <div class="flex flex-wrap gap-2 mb-6">
              {Array(5).fill(0).map((_, index) => (
                <div class="h-8 bg-gray-200 rounded-full w-20"></div>
              ))}
            </div>
          </div>
          <div>
            <div class="h-6 bg-gray-200 rounded w-1/2 mb-4"></div>
            <div class="h-4 bg-gray-200 rounded w-full mb-2"></div>
            <div class="h-4 bg-gray-200 rounded w-full mb-2"></div>
            <div class="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
          </div>
        </div>
      </div>
    ) : videoError ? (
      <div class="bg-white p-6 rounded-lg shadow-md">
        <div class="text-center py-8">
          <p class="text-red-500 mb-4">{videoError}</p>
          <button
            onclick="window.location.reload()"
            class="px-4 py-2 bg-gold-600 text-white rounded-md hover:bg-gold-700"
          >
            {t('common.retry', '重試')}
          </button>
        </div>
      </div>
    ) : video ? (
      <div>
        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
          <h1 class="text-2xl md:text-3xl font-bold mb-6">{video.title}</h1>
          
          {/* 影片播放器 */}
          {video.video_url ? (
            <div class="aspect-video mb-6 bg-black rounded-lg overflow-hidden">
              <video
                controls
                class="w-full h-full"
                poster={video.thumbnail_large || video.thumbnail_small}
                preload="metadata"
              >
                <source src={video.video_url} type="application/x-mpegURL" />
                {t('player.notSupported', '您的瀏覽器不支持 HTML5 視頻。')}
              </video>
            </div>
          ) : (
            <div class="aspect-video mb-6 bg-black rounded-lg overflow-hidden flex items-center justify-center">
              <img
                src={video.thumbnail_large || video.thumbnail_small || 'https://via.placeholder.com/800x450?text=No+Image'}
                alt={video.title}
                class="max-w-full max-h-full object-contain"
              />
            </div>
          )}
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* 左側詳情 */}
            <div class="md:col-span-2">
              {/* 基本信息 */}
              <div class="mb-6">
                {video.description && (
                  <div class="mb-4">
                    <h2 class="text-lg font-semibold mb-2">{t('video.description', '描述')}</h2>
                    <p class="text-gray-700 whitespace-pre-line">{video.description}</p>
                  </div>
                )}
                
                {video.actors && (
                  <div class="mb-4">
                    <h2 class="text-lg font-semibold mb-2">{t('video.actors', '演員')}</h2>
                    <div class="flex flex-wrap gap-2">
                      {formatActors(video.actors).map((actor) => (
                        <a
                          href={`/${currentLanguage}/category/actor/${encodeURIComponent(actor)}`}
                          class="px-3 py-1 bg-primary-100 text-secondary-700 rounded-md border border-primary-200 hover:bg-primary-200"
                        >
                          {actor}
                        </a>
                      ))}
                    </div>
                  </div>
                )}
                
                {video.tags && (
                  <div class="mb-4">
                    <h2 class="text-lg font-semibold mb-2">{t('video.tags', '標籤')}</h2>
                    <div class="flex flex-wrap gap-2">
                      {formatTags(video.tags).map((tag) => (
                        <a
                          href={`/${currentLanguage}/category/tag/${encodeURIComponent(tag)}`}
                          class="px-3 py-1 bg-gradient-to-r from-primary-100 to-primary-200 hover:from-primary-200 hover:to-primary-300 border border-gold-400 rounded-full text-secondary-900 transition-colors duration-200 shadow-sm"
                        >
                          {tag}
                        </a>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            {/* 右側信息 */}
            <div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <h2 class="text-lg font-semibold mb-4">{t('video.detail', '影片詳情')}</h2>
                <ul class="space-y-3">
                  {video.barcode && (
                    <li class="flex justify-between">
                      <span class="text-gray-600">{t('video.code', '番號')}:</span>
                      <span class="font-medium">{video.barcode}</span>
                    </li>
                  )}
                  
                  {video.manufacturer && (
                    <li class="flex justify-between">
                      <span class="text-gray-600">{t('video.manufacturer', '片商')}:</span>
                      <a
                        href={`/${currentLanguage}/category/manufacturer/${encodeURIComponent(video.manufacturer)}`}
                        class="font-medium text-gold-600 hover:underline"
                      >
                        {video.manufacturer}
                      </a>
                    </li>
                  )}
                  
                  {video.upload_date && (
                    <li class="flex justify-between">
                      <span class="text-gray-600">{t('video.uploadDate', '上傳日期')}:</span>
                      <span class="font-medium">{formatDate(video.upload_date)}</span>
                    </li>
                  )}
                  
                  {video.production_date && (
                    <li class="flex justify-between">
                      <span class="text-gray-600">{t('video.releaseDate', '製作日期')}:</span>
                      <span class="font-medium">{formatDate(video.production_date)}</span>
                    </li>
                  )}
                  
                  {video.views !== undefined && (
                    <li class="flex justify-between">
                      <span class="text-gray-600">{t('video.views', '觀看次數')}:</span>
                      <span class="font-medium">{video.views.toLocaleString()}</span>
                    </li>
                  )}
                  
                  {video.source && (
                    <li class="flex justify-between">
                      <span class="text-gray-600">{t('video.source', '來源')}:</span>
                      <span class="font-medium">{video.source}</span>
                    </li>
                  )}
                </ul>
              </div>
            </div>
          </div>
        </div>
        
        {/* 相關影片 */}
        <div class="bg-white p-6 rounded-lg shadow-md">
          <h2 class="text-xl font-semibold mb-6">{t('video.relatedVideos', '相關影片')}</h2>
          
          {relatedVideosLoading ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
              {Array(3).fill(0).map((_, index) => (
                <VideoCardSkeleton client:visible />
              ))}
            </div>
          ) : relatedVideosError ? (
            <p class="text-red-500">{relatedVideosError}</p>
          ) : relatedVideos.length > 0 ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
              {relatedVideos.map((relatedVideo, index) => (
                <VideoCard
                  video={relatedVideo}
                  priority={false}
                  client:visible
                />
              ))}
            </div>
          ) : (
            <p class="text-gray-500 text-center py-4">{t('common.noResults', '沒有找到相關影片')}</p>
          )}
        </div>
      </div>
    ) : (
      <div class="bg-white p-6 rounded-lg shadow-md">
        <div class="text-center py-8">
          <p class="text-red-500 mb-4">{t('common.pageNotFound', '找不到頁面')}</p>
          <a
            href={`/${currentLanguage}`}
            class="px-4 py-2 bg-gold-600 text-white rounded-md hover:bg-gold-700 inline-block"
          >
            {t('common.back', '返回')}
          </a>
        </div>
      </div>
    )}
  </div>

  <script>
    // 客戶端腳本，用於處理 i18n 和動態內容
    import i18n from '../../i18n';
    import { localizedLink } from '../../utils/linkHelper';

    // 獲取當前語言
    const currentLanguage = i18n.language || 'tw';
    
    // 更新所有語言相關的元素
    document.querySelectorAll('a[href^="/tw/"], a[href^="/cn/"], a[href^="/en/"]').forEach(link => {
      const path = link.getAttribute('href').replace(/^\/[a-z]{2}\//, '');
      link.setAttribute('href', `/${currentLanguage}/${path}`);
    });

    // 翻譯所有帶有 data-i18n 屬性的元素
    document.querySelectorAll('[data-i18n]').forEach(el => {
      const key = el.getAttribute('data-i18n');
      const fallback = el.textContent;
      el.textContent = i18n.t(key, fallback);
    });
  </script>
</Layout>
